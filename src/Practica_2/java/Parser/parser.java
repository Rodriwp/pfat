
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 09 11:02:30 CET 2017
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 09 11:02:30 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\010\000\002\003" +
    "\005\000\002\003\007\000\002\003\012\000\002\015\004" +
    "\000\002\015\005\000\002\016\004\000\002\004\003\000" +
    "\002\004\005\000\002\010\003\000\002\005\003\000\002" +
    "\005\005\000\002\007\003\000\002\007\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\005\000\002\014\006\000\002\011\005\000" +
    "\002\012\007\000\002\012\011\000\002\013\005\000\002" +
    "\017\003\000\002\017\005\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\017\006\000\002\017\003\000" +
    "\002\017\006\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\033\004\001\002\000\004\044\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\022\006\016\012\011\013\021\016\026\031\013\034" +
    "\017\037\014\044\012\001\002\000\024\002\ufff1\006\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\035\ufff1\044" +
    "\ufff1\001\002\000\024\014\040\015\042\017\044\022\035" +
    "\031\041\041\043\043\037\044\034\045\033\001\002\000" +
    "\004\005\136\001\002\000\004\044\124\001\002\000\004" +
    "\042\117\001\002\000\004\004\115\001\002\000\024\014" +
    "\040\015\042\017\044\022\035\031\041\041\043\043\037" +
    "\044\034\045\033\001\002\000\014\006\016\012\011\013" +
    "\021\016\026\044\012\001\002\000\024\002\ufff0\006\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\016\ufff0\035\ufff0\044" +
    "\ufff0\001\002\000\004\031\032\001\002\000\004\004\031" +
    "\001\002\000\004\002\uffff\001\002\000\024\002\ufff6\006" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\035\ufff6" +
    "\044\ufff6\001\002\000\004\002\ufff7\001\002\000\004\041" +
    "\027\001\002\000\004\004\030\001\002\000\024\002\uffee" +
    "\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee\016\uffee\035" +
    "\uffee\044\uffee\001\002\000\024\002\uffef\006\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\016\uffef\035\uffef\044\uffef\001" +
    "\002\000\024\014\040\015\042\017\044\022\035\031\041" +
    "\041\043\043\037\044\034\045\033\001\002\000\046\004" +
    "\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf\016\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\032\uffdf\034\uffdf\044\uffdf\001\002\000\046" +
    "\004\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\016\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\034\uffe8\044\uffe8\001\002\000" +
    "\024\014\040\015\042\017\044\022\035\031\041\041\043" +
    "\043\037\044\034\045\033\001\002\000\026\020\051\021" +
    "\053\022\047\023\050\024\054\025\046\026\055\027\056" +
    "\030\052\032\100\001\002\000\046\004\uffdd\006\uffdd\007" +
    "\uffdd\012\uffdd\013\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\032" +
    "\uffdd\034\uffdd\044\uffdd\001\002\000\004\031\075\001\002" +
    "\000\024\014\040\015\042\017\044\022\035\031\041\041" +
    "\043\043\037\044\034\045\033\001\002\000\004\031\070" +
    "\001\002\000\046\004\uffe6\006\uffe6\007\uffe6\012\uffe6\013" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\034\uffe6\044" +
    "\uffe6\001\002\000\024\014\040\015\042\017\044\022\035" +
    "\031\041\041\043\043\037\044\034\045\033\001\002\000" +
    "\046\004\uffda\006\uffda\007\uffda\012\uffda\013\uffda\016\uffda" +
    "\020\051\021\053\022\047\023\050\024\054\025\uffda\026" +
    "\uffda\027\056\030\052\032\uffda\034\uffda\044\uffda\001\002" +
    "\000\024\014\040\015\042\017\044\022\035\031\041\041" +
    "\043\043\037\044\034\045\033\001\002\000\024\014\040" +
    "\015\042\017\044\022\035\031\041\041\043\043\037\044" +
    "\034\045\033\001\002\000\024\014\040\015\042\017\044" +
    "\022\035\031\041\041\043\043\037\044\034\045\033\001" +
    "\002\000\024\014\040\015\042\017\044\022\035\031\041" +
    "\041\043\043\037\044\034\045\033\001\002\000\024\014" +
    "\040\015\042\017\044\022\035\031\041\041\043\043\037" +
    "\044\034\045\033\001\002\000\024\014\040\015\042\017" +
    "\044\022\035\031\041\041\043\043\037\044\034\045\033" +
    "\001\002\000\024\014\040\015\042\017\044\022\035\031" +
    "\041\041\043\043\037\044\034\045\033\001\002\000\024" +
    "\014\040\015\042\017\044\022\035\031\041\041\043\043" +
    "\037\044\034\045\033\001\002\000\024\014\040\015\042" +
    "\017\044\022\035\031\041\041\043\043\037\044\034\045" +
    "\033\001\002\000\046\004\uffd9\006\uffd9\007\uffd9\012\uffd9" +
    "\013\uffd9\016\uffd9\020\051\021\053\022\047\023\050\024" +
    "\054\025\uffd9\026\uffd9\027\056\030\052\032\uffd9\034\uffd9" +
    "\044\uffd9\001\002\000\046\004\uffdc\006\uffdc\007\uffdc\012" +
    "\uffdc\013\uffdc\016\uffdc\020\051\021\053\022\047\023\050" +
    "\024\054\025\046\026\055\027\056\030\052\032\uffdc\034" +
    "\uffdc\044\uffdc\001\002\000\046\004\uffe2\006\uffe2\007\uffe2" +
    "\012\uffe2\013\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\050\024\054\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2" +
    "\034\uffe2\044\uffe2\001\002\000\046\004\uffe5\006\uffe5\007" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\020\uffe5\021\053\022\047" +
    "\023\050\024\054\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\034\uffe5\044\uffe5\001\002\000\046\004\uffd7\006\uffd7" +
    "\007\uffd7\012\uffd7\013\uffd7\016\uffd7\020\051\021\053\022" +
    "\047\023\050\024\054\025\uffd7\026\uffd7\027\uffd7\030\052" +
    "\032\uffd7\034\uffd7\044\uffd7\001\002\000\046\004\uffd8\006" +
    "\uffd8\007\uffd8\012\uffd8\013\uffd8\016\uffd8\020\051\021\053" +
    "\022\047\023\050\024\054\025\uffd8\026\uffd8\027\uffd8\030" +
    "\052\032\uffd8\034\uffd8\044\uffd8\001\002\000\046\004\uffe3" +
    "\006\uffe3\007\uffe3\012\uffe3\013\uffe3\016\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\050\024\054\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\032\uffe3\034\uffe3\044\uffe3\001\002\000\046\004" +
    "\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\016\uffe4\020\uffe4" +
    "\021\053\022\047\023\050\024\054\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\032\uffe4\034\uffe4\044\uffe4\001\002\000\046" +
    "\004\uffdb\006\uffdb\007\uffdb\012\uffdb\013\uffdb\016\uffdb\020" +
    "\051\021\053\022\047\023\050\024\054\025\046\026\uffdb" +
    "\027\056\030\052\032\uffdb\034\uffdb\044\uffdb\001\002\000" +
    "\024\014\040\015\042\017\044\022\035\031\041\041\043" +
    "\043\037\044\034\045\033\001\002\000\026\020\051\021" +
    "\053\022\047\023\050\024\054\025\046\026\055\027\056" +
    "\030\052\032\072\001\002\000\046\004\uffe0\006\uffe0\007" +
    "\uffe0\012\uffe0\013\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032" +
    "\uffe0\034\uffe0\044\uffe0\001\002\000\026\020\051\021\053" +
    "\022\047\023\050\024\054\025\046\026\055\027\056\030" +
    "\052\032\074\001\002\000\046\004\uffe7\006\uffe7\007\uffe7" +
    "\012\uffe7\013\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7" +
    "\034\uffe7\044\uffe7\001\002\000\024\014\040\015\042\017" +
    "\044\022\035\031\041\041\043\043\037\044\034\045\033" +
    "\001\002\000\026\020\051\021\053\022\047\023\050\024" +
    "\054\025\046\026\055\027\056\030\052\032\077\001\002" +
    "\000\046\004\uffde\006\uffde\007\uffde\012\uffde\013\uffde\016" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\032\uffde\034\uffde\044\uffde\001" +
    "\002\000\004\004\uffed\001\002\000\046\004\uffe1\006\uffe1" +
    "\007\uffe1\012\uffe1\013\uffe1\016\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\032\uffe1\034\uffe1\044\uffe1\001\002\000\004\035\105\001" +
    "\002\000\016\006\016\012\011\013\021\016\026\035\ufff4" +
    "\044\012\001\002\000\004\035\ufff3\001\002\000\024\002" +
    "\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016\ufff5" +
    "\035\ufff5\044\ufff5\001\002\000\026\007\107\020\051\021" +
    "\053\022\047\023\050\024\054\025\046\026\055\027\056" +
    "\030\052\001\002\000\016\006\016\012\011\013\021\016" +
    "\026\034\017\044\012\001\002\000\006\010\111\011\112" +
    "\001\002\000\016\006\016\012\011\013\021\016\026\034" +
    "\017\044\012\001\002\000\024\002\uffeb\006\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\016\uffeb\035\uffeb\044\uffeb\001" +
    "\002\000\004\011\114\001\002\000\024\002\uffea\006\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\016\uffea\035\uffea\044" +
    "\uffea\001\002\000\024\002\ufff2\006\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\016\ufff2\035\ufff2\044\ufff2\001\002\000" +
    "\016\006\016\012\011\013\021\016\026\034\017\044\012" +
    "\001\002\000\004\044\124\001\002\000\004\004\121\001" +
    "\002\000\020\006\ufffc\012\ufffc\013\ufffc\016\ufffc\034\ufffc" +
    "\042\117\044\ufffc\001\002\000\016\006\ufffb\012\ufffb\013" +
    "\ufffb\016\ufffb\034\ufffb\044\ufffb\001\002\000\004\004\ufffa" +
    "\001\002\000\010\004\ufff9\032\ufff9\036\125\001\002\000" +
    "\004\044\124\001\002\000\006\004\ufff8\032\ufff8\001\002" +
    "\000\004\002\ufffe\001\002\000\004\032\131\001\002\000" +
    "\020\006\016\012\011\013\021\016\026\034\017\037\132" +
    "\044\012\001\002\000\004\042\117\001\002\000\004\002" +
    "\000\001\002\000\016\006\016\012\011\013\021\016\026" +
    "\034\017\044\012\001\002\000\004\002\ufffd\001\002\000" +
    "\024\014\040\015\042\017\044\022\035\031\041\041\043" +
    "\043\037\044\034\045\033\001\002\000\026\004\uffec\020" +
    "\051\021\053\022\047\023\050\024\054\025\046\026\055" +
    "\027\056\030\052\001\002\000\040\006\016\012\011\013" +
    "\021\016\026\020\051\021\053\022\047\023\050\024\054" +
    "\025\046\026\055\027\056\030\052\034\017\044\012\001" +
    "\002\000\024\002\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\016\uffe9\035\uffe9\044\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\024\006\023" +
    "\010\022\011\014\012\007\013\017\014\021\001\001\000" +
    "\002\001\001\000\004\017\137\001\001\000\002\001\001" +
    "\000\004\004\127\001\001\000\006\015\115\016\117\001" +
    "\001\000\002\001\001\000\004\017\105\001\001\000\016" +
    "\006\102\007\101\011\014\012\007\013\017\014\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\044" +
    "\001\001\000\002\001\001\000\004\017\066\001\001\000" +
    "\004\017\065\001\001\000\004\017\064\001\001\000\004" +
    "\017\063\001\001\000\004\017\062\001\001\000\004\017" +
    "\061\001\001\000\004\017\060\001\001\000\004\017\057" +
    "\001\001\000\004\017\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\102\007\103\011\014\012\007\013\017" +
    "\014\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\107\006\023\011\014\012\007" +
    "\013\017\014\021\001\001\000\002\001\001\000\016\005" +
    "\112\006\023\011\014\012\007\013\017\014\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\024\006\023\010\126\011\014" +
    "\012\007\013\017\014\021\001\001\000\004\004\122\001" +
    "\001\000\002\001\001\000\006\015\121\016\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\024\006\023\010\132\011" +
    "\014\012\007\013\017\014\021\001\001\000\006\015\133" +
    "\016\117\001\001\000\002\001\001\000\020\005\024\006" +
    "\023\010\134\011\014\012\007\013\017\014\021\001\001" +
    "\000\002\001\001\000\004\017\136\001\001\000\002\001" +
    "\001\000\016\005\140\006\023\011\014\012\007\013\017" +
    "\014\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void syntax_error(Symbol s) {
    report_error("Error de sintaxis en linea " + s.left, null);
  }

  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    report_fatal_error("", null);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MAYORQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpMayor(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp MENORQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpMenor(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp IGUALQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpIgual(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= NOT Exp 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpNot(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp AND Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpAnd(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp OR Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpOr(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= CLOG 
            {
              Exp RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpBoolean(bool.booleanValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= INT2STR PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpInt2Str(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= CST 
            {
              Exp RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpString(str); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= STR2INT PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpStr2Int(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= MENOS Exp 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpOpuesto(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpDivision(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp POR Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpMultiplicacion(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpResta(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpSuma(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= CENT 
            {
              Exp RESULT = null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer ent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpEntero(ent); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpParentesis(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= IDENT 
            {
              Exp RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpIdent(ident); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Repet ::= WHILE Exp Sent 
            {
              Repet RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Repet(exp, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Repet*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Cond ::= IF Exp THEN Sent ELSE Sent ENDIF 
            {
              Cond RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencia sent1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sent2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cond2(exp, sent1, sent2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Cond ::= IF Exp THEN Sent ENDIF 
            {
              Cond RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cond1(exp, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asign ::= IDENT ASOP Exp 
            {
              Asign RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Asign(ident, exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Asign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Print ::= PRINT PAREN Exp TESIS 
            {
              Print RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SentSimp ::= BREAK CENT PC 
            {
              Sentencia RESULT = null;
		int centleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int centright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer cent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentSimp5(cent); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SentSimp ::= Print PC 
            {
              Sentencia RESULT = null;
		int printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print print = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentSimp4(print); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SentSimp ::= Repet 
            {
              Sentencia RESULT = null;
		int repetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int repetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Repet repet = (Repet)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SentSimp3(repet); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SentSimp ::= Cond 
            {
              Sentencia RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Cond cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SentSimp2(cond); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentSimp ::= Asign PC 
            {
              Sentencia RESULT = null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asign asign = (Asign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentSimp1(asign); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentList ::= SentSimp SentList 
            {
              Sentencia RESULT = null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sentsimp = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia sentlist = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SentList2(sentsimp, sentlist); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*SentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SentList ::= SentSimp 
            {
              Sentencia RESULT = null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia sentsimp = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SentList1(sentsimp); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*SentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sent ::= ABRELLAVE SentList CIERRALLAVE 
            {
              Sentencia RESULT = null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia sentlist = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sent2(sentlist); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sent ::= SentSimp 
            {
              Sentencia RESULT = null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia sentsimp = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sent1(sentsimp); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Body ::= Sent 
            {
              Sentencia RESULT = null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Body(sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVar ::= IDENT COMA LVar 
            {
              LVar RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LVar2(ident, lvar); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LVar ::= IDENT 
            {
              LVar RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LVar1(ident); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= TIPO LVar 
            {
              Decl RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Decl(tipo, lvar); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VDef ::= Decl PC VDef 
            {
              VDef RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VDef vdef = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VDef2(decl, vdef); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*VDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VDef ::= Decl PC 
            {
              VDef RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VDef1(decl); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*VDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= PROG IDENT PAREN LVar TESIS VARS VDef Body 
            {
              S RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VDef vdef = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia body = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new S4(ident, lvar, vdef, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= PROG IDENT VARS VDef Body 
            {
              S RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VDef vdef = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia body = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new S3(ident, vdef, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= PROG IDENT Body 
            {
              S RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia body = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new S2(ident, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROG IDENT PAREN LVar TESIS Body 
            {
              S RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sentencia body = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new S1(ident, lvar, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

